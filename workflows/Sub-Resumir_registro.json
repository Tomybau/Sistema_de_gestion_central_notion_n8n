{
  "active": false,
  "connections": {
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "resumen_nota",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "resumen_idea",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "resumen_tarea",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "resumen_evento",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "resumen_nota": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_idea": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "resumen_tarea": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "resumen_evento": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "resumen_nota",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "resumen_idea",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "obtener_departamentos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "resumen_evento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis3": {
      "main": [
        [
          {
            "node": "redis_a_JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Redis3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "JSON_resumen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis_a_JSON": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON_resumen": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener_departamentos": {
      "main": [
        [
          {
            "node": "departamentos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "departamentos": {
      "main": [
        [
          {
            "node": "resumen_tarea",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-14T10:07:27.748Z",
  "id": "sDZn8KVP4u4amYnY",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Sub-Resumir_registro",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        880,
        896
      ],
      "id": "1d163844-e7f8-4da0-9a80-7899fa6f8758",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "fDpifv2qqDic1ocl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=El usuario dijo:\n{{ $json.Entradas[0].Entrada_inicial }}",
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un asistente que organiza y resume notas rápidas.\nTu objetivo es limpiar el texto del usuario, eliminar repeticiones y dejar un texto claro y conciso.\nJamas por ninguina razon puedes inventar informacion que no se encuentre en lo que el usuario dijo\nDebes mantener el tono natural del usuario pero hacer que la nota quede entendible y útil.\n\nDevuelve la información en formato JSON, sin ningún texto adicional.\nEstructura esperada:\n\n{\n  \"titulo\": \"frase corta que resuma la nota\",\n  \"descripcion\": \"explicación o desarrollo\"\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        880,
        272
      ],
      "id": "c9d58f1a-b09c-4eb6-b5f8-df218b988996",
      "name": "resumen_nota"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=El usuario dijo:\n{{ $json.Entradas[0].Entrada_inicial }}",
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un asistente que ayuda a registrar ideas.\nTu objetivo es resumir y organizar una propuesta o pensamiento del usuario.\nDebes dejar clara la esencia de la idea, su propósito y su posible aplicación.\nJamas por ninguina razon puedes inventar informacion que no se encuentre en lo que el usuario dijo\nSi el ususario da diferentes puntos o crees que la informacion es mejor acomodarla por puntos puedes colocar distintos separadores como \n1) o - .\n\n\nDevuelve solo un JSON con esta estructura:\n{\n  \"titulo\": \"título claro de la idea\",\n  \"descripcion\": \"resumen del concepto central o del problema que intenta resolver\",\n}"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        880,
        432
      ],
      "id": "e47ec7cd-dcf9-4497-b33a-da99d970b749",
      "name": "resumen_idea"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=El usuario dijo:\n{{ $('redis_a_JSON').item.json.Entradas[0].Entrada_inicial }}",
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un asistente que ayuda a registrar tareas de trabajo.\nEl usuario puede hablar de manera informal o explicar varias cosas, pero tú debes identificar la acción principal a realizar y acomodar el demas texto lo mas claro posible.\nJamas por ninguina razon puedes inventar informacion que no se encuentre en lo que el usuario dijo\nDepartametnos disponibles: {{ $json.departamentos }}\n\nTu objetivo:\n1. Resumir la acción principal.\n2. Detectar fecha, departamento o responsable si se mencionan.\n3. Dejar los campos vacíos si no aparecen.\n\nDevuelve únicamente un JSON con esta estructura:\n{\n  \"titulo\": \"acción concreta que debe realizarse\",\n  \"descripcion\": \"detalle o contexto de la tarea\",\n  \"fecha\": \"YYYY-MM-DD o vacío\",\n  \"departamento\": \"nombre del área si se menciona, o vacío\",\n  \"prioridad\": \"baja | media | alta o vacío\"\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        880,
        592
      ],
      "id": "91f007cb-dc64-49d8-90f0-3748e4b695b3",
      "name": "resumen_tarea"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=El usuario dijo:\n{{ $json.Entradas[0].Entrada_inicial }}\n",
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un asistente que ayuda a registrar eventos o reuniones.\nEl usuario puede hablar de forma espontánea o incluir detalles mezclados.\nDebes identificar fecha, hora, tema del evento.\n\n## Casos para las fechas:\n- Si no se especifica nada, deja vacio *JAMAS PUEDES INVENTAR DATOS NO DADOS POR EL USUARIO*\n- Si solo se especifica una fecha para el evento completa \"fecha\" y deja \"fecha_inicio\" y \"fecha_fin\" vacios\n- Si especifica el horario pero no la finalizacion pon en \"fecha_inicio\" la fecha con la hora y en hora fin coloca media hora mas de la fecha y hora de inicio\n- Si especifica fecha y hora de inicio y fin completa en su respectivos lugares\nFecha y hora actual para que te guies: {{ $now }}\n\n\n\nTu objetivo es dejarlo todo listo para crear el evento en Notion.\nDevuelve solo un JSON con esta estructura:\n\n{\n  \"titulo\": \"nombre o motivo del evento\",\n  \"descripcion\": \"contexto o información adicional (opcional)\",\n  \"fecha\": \"YYYY-MM-DD o vacío\",\n  \"fecha_inicio\": \"YYYY-MM-DD HH:MM o vacío\",\n  \"fecha_fin\": \"YYYY-MM-DD HH:MM o vacío\",\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        880,
        736
      ],
      "id": "5c4b336f-9cf9-4f6c-8536-bfd084260072",
      "name": "resumen_evento"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.Registro[0].Nombre }}",
                    "rightValue": "ota",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "ec660159-aacb-475c-91ee-61513a611f8e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Nota"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "05cee529-d997-4e58-929e-a49129cfc1b7",
                    "leftValue": "={{ $json.Registro[0].Nombre }}",
                    "rightValue": "dea",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Idea"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b90df110-1603-4e5b-ba95-9e5f70545b89",
                    "leftValue": "={{ $json.Registro[0].Nombre }}",
                    "rightValue": "area",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Tarea"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "53603cb2-77ae-4ee6-944a-35fe1cfbeb87",
                    "leftValue": "={{ $json.Registro[0].Nombre }}",
                    "rightValue": "vento",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Evento"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        432,
        480
      ],
      "id": "6f5be720-de48-4621-bdfb-921942a18282",
      "name": "Switch1"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $json.chat_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        80,
        512
      ],
      "id": "41c7cedd-0774-4632-ad2e-d4b35a10c066",
      "name": "Redis3",
      "credentials": {
        "redis": {
          "id": "FCP6hT01xV80XIPs",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "height": 784,
        "width": 1888
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -144,
        240
      ],
      "id": "1f6da120-7bcf-41e3-8491-03d5e0e14c2f",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "chat_id"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -96,
        512
      ],
      "id": "e7dc2d05-0019-42b9-85fa-bf9294ade9db",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1216,
        480
      ],
      "id": "8302cfda-d2be-4f52-a289-744d343e7004",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('When Executed by Another Workflow').item.json.chat_id }}",
        "value": "={\n  \"Estado\": \"resumen_obtenido\",\n  \"Entradas\": [\n    {\n      \"Entrada_inicial\": \"{{ $('redis_a_JSON').item.json.Entradas[0].Entrada_inicial }}\",\n      \"Entrada_registro\": \"{{ $('redis_a_JSON').item.json.Entradas[0].Entrada_registro }}\",\n      \"Entrada_empresa\": \"{{ $('redis_a_JSON').item.json.Entradas[0].Entrada_empresa }}\"\n    }\n  ],\n  \"Empresa\": [\n    {\n      \"id\": \"{{ $('redis_a_JSON').item.json.Empresa[0].id }}\",\n      \"Nombre\": \"{{ $('redis_a_JSON').item.json.Empresa[0].Nombre }}\",\n      \"Confianza_empresa\": {{ $('redis_a_JSON').item.json.Empresa[0].Confianza_empresa }}\n    }\n  ],\n  \"Registro\": [\n    {\n      \"Nombre\": \"{{ $('redis_a_JSON').item.json.Registro[0].Nombre }}\",\n      \"Confianza_registro\": {{ $('redis_a_JSON').item.json.Registro[0].Confianza_registro }}\n    }\n  ],\n  \"Agente\": [\n    {\n      \"Titulo\": \"{{ $json.titulo }}\",\n      \"Descripción\": \"{{ $json.descripcion || \"\"}}\",\n      \"Fecha\": \"{{ $json.fecha || \"\"}}\",\n      \"Fecha_inicio\": \"{{ $json.fecha || \"\"}}\",\n      \"Fecha_fin\": \"{{ $json.fecha || \"\"}}\",\n      \"Departamento\":\"{{ $json.departamento || \"\"}}\",\n      \"Prioridad\":\"{{ $json.prioridad || \"\"}}\"\n    }\n  ]\n}\n",
        "expire": true,
        "ttl": 600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1552,
        512
      ],
      "id": "5495960f-f1f4-4bc4-8dbe-4f731ceb2751",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "FCP6hT01xV80XIPs",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Tomamos la salida del nodo anterior (Redis3)\nconst rawData = $json[\"data\"];\n\n// Validamos si existe y si es un string JSON\nlet parsedData;\ntry {\n  parsedData = rawData ? JSON.parse(rawData) : {};\n} catch (error) {\n  parsedData = { error: \"No se pudo parsear el JSON desde Redis3\", raw: rawData };\n}\n\n// Devolvemos el objeto final como JSON\nreturn [{ json: parsedData }];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        512
      ],
      "id": "c8023c1e-9790-4e91-8574-2f3936224079",
      "name": "redis_a_JSON"
    },
    {
      "parameters": {
        "jsCode": "const raw = $json[\"text\"];\nlet data;\n\ntry {\n  data = JSON.parse(raw);\n} catch (e) {\n  data = JSON.parse(raw.replace(/'/g, '\"'));\n}\n\nreturn data;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1392,
        512
      ],
      "id": "402d6e62-d53e-4b97-af64-6ba7780926cf",
      "name": "JSON_resumen"
    },
    {
      "parameters": {
        "resource": "database",
        "databaseId": {
          "__rl": true,
          "value": "27d272c9-f6ae-80b4-977c-d9437f449f5a",
          "mode": "list",
          "cachedResultName": "Acciones Estratégicas",
          "cachedResultUrl": "https://www.notion.so/27d272c9f6ae80b4977cd9437f449f5a"
        },
        "simple": false
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        320,
        752
      ],
      "id": "d33daba1-c31e-416f-9605-75796e853280",
      "name": "obtener_departamentos",
      "credentials": {
        "notionApi": {
          "id": "fyQ0RqcmHkhWZLsD",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 🧩 Extrae los nombres de todos los departamentos desde el JSON de Notion\n\n// Obtenemos el primer item del input (el objeto del database)\nconst db = items[0].json;\n\n// Navegamos hasta la propiedad \"Departamento\"\nconst departamentos = db.properties?.Departamento?.select?.options || [];\n\n// Creamos un arreglo solo con los nombres\nconst nombresDepartamentos = departamentos.map(d => d.name);\n\n// Devolvemos los nombres como resultado\nreturn [{ json: { departamentos: nombresDepartamentos } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        752
      ],
      "id": "e48391f3-b648-4634-9564-aa59cf699782",
      "name": "departamentos"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "chat_id": "810851532108753"
        }
      }
    ]
  },
  "repo_name": "Sistema_de_gestion_central_notion_n8n",
  "repo_owner": "Tomybau",
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-14T10:07:27.748Z",
      "updatedAt": "2025-10-14T10:07:27.748Z",
      "role": "workflow:owner",
      "workflowId": "sDZn8KVP4u4amYnY",
      "projectId": "5ieVStNAHt1Bb6Tr"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-15T23:16:12.194Z",
      "updatedAt": "2025-10-15T23:16:12.194Z",
      "id": "NHMeAPMIT8hmJz47",
      "name": "Notion"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-10-16T14:35:41.395Z",
  "versionId": "9a549c91-fc0e-4a0c-af15-3e882d2b8d37"
}