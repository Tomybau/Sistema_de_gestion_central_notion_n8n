{
  "active": false,
  "connections": {
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "empresa",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "empresa": {
      "main": [
        [
          {
            "node": "JSON_empresa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener_empresas": {
      "main": [
        [
          {
            "node": "limpiar_empresas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "limpiar_empresas": {
      "main": [
        [
          {
            "node": "empresa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "obtener_redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON_empresa": {
      "main": [
        [
          {
            "node": "confianza_formato?",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "obtener_redis": {
      "main": [
        [
          {
            "node": "redis_a_JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis_a_JSON": {
      "main": [
        [
          {
            "node": "obtener_empresas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "confianza_formato?": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "empresa",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-13T22:22:01.454Z",
  "id": "zSm2pgcHQUO60vua",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Sub-Determinar_Empresa",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        400,
        304
      ],
      "id": "58cc47f5-bc8a-4675-85a3-e0f94e1b8916",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "fDpifv2qqDic1ocl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When Executed by Another Workflow').first().json.input }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un asistente que identifica a qué empresa pertenece un texto.\nAnaliza si no existen palabras \"raras\" o con fonetica similares a las empresas disponibles que puedan ser el nombre de la empresa pero mal traducido, en especial si el mensaje llego por audio.\nLuego en el JSON final coloca la confianza que tienes del 1 como totalemnte seguro a 0 como nada seguro de que el nombre de la empresa sea el correcto\nAntes de devolverlo, analiza que el JSON que devuelvas sea valido\n\nEmpresas disponibles:\n{{ $json.lista_nombres }}\n\nAnaliza el texto y devuelve *SOLO el siguiente JSON*\n\n\n{\n  \"empresa\": \"<nombre o ''>\",\n  \"confianza\": <valor 0-1>\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        416,
        144
      ],
      "id": "1d86893a-5087-4686-a265-daa1886dd016",
      "name": "empresa",
      "retryOnFail": false
    },
    {
      "parameters": {
        "jsCode": "// --- 1) Datos de entrada ---\nconst data = {\n  empresa: $input.first().json.output.empresa ?? \"\",\n  confianza: $input.first().json.output.confianza ?? null,\n};\n\n// --- 2) Cargamos la lista desde el nodo \"limpiar_empresas\" ---\nlet empresas = [];\nconst inputEmpresas = $('limpiar_empresas').first().json;\n\n// Soporte para distintos formatos\nif (Array.isArray(inputEmpresas[\"empresas/proyectos\"])) {\n  empresas = inputEmpresas[\"empresas/proyectos\"];\n} else if (Array.isArray(inputEmpresas.empresas)) {\n  empresas = inputEmpresas.empresas;\n} else if (Array.isArray(inputEmpresas.lista_nombres)) {\n  empresas = inputEmpresas.lista_nombres.map(n => ({ nombre: n }));\n}\n\n// Si no hay lista de empresas, devolvemos error claro\nif (!empresas || empresas.length === 0) {\n  return {\n    ...data,\n    match: false,\n    mensaje: \"No se encontró lista de empresas en el input\",\n    _debug: { estructura_json: inputEmpresas },\n  };\n}\n\n// --- 3) Normalización de texto ---\nfunction normalizar(s) {\n  return (s ?? \"\")\n    .toString()\n    .normalize('NFKC')\n    .replace(/[\\u200B-\\u200D\\uFEFF]/g, '')\n    .replace(/\\u00A0/g, ' ')\n    .trim()\n    .toLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/\\s+/g, ' ');\n}\n\nconst empresaInputRaw = data.empresa;\nconst empresaInputNorm = normalizar(empresaInputRaw);\n\n// --- 4) Búsqueda exacta ---\nlet empresaMatch = null;\nlet idMatch = null;\n\nfor (const e of empresas) {\n  const nombreNorm = normalizar(e.nombre ?? e);\n  if (nombreNorm === empresaInputNorm) {\n    empresaMatch = e.nombre ?? e;\n    idMatch = e.id ?? null;\n    break;\n  }\n}\n\n// --- 5) Resultado final ---\nif (empresaMatch) {\n  data.empresa_normalizada = empresaMatch;\n  data.empresa_id = idMatch;\n  data.match = true;\n  data.mensaje = \"Empresa válida\";\n} else {\n  data.empresa_normalizada = empresaInputRaw;\n  data.empresa_id = null;\n  data.match = false;\n  data.mensaje = \"Empresa incorrecta\";\n}\n\nreturn data;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        144
      ],
      "id": "8d644e59-be56-40ea-ba91-c14f1ca3d9f3",
      "name": "JSON_empresa",
      "retryOnFail": false
    },
    {
      "parameters": {
        "content": "## Determinar empresa\n",
        "height": 464,
        "width": 1744,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -560,
        16
      ],
      "id": "99348149-87d4-4554-b24e-25ea7b2139ba",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "28a272c9-f6ae-8045-8bc7-f5e9c9fdc749",
          "mode": "list",
          "cachedResultName": "Empresas/Proyectos",
          "cachedResultUrl": "https://www.notion.so/28a272c9f6ae80458bc7f5e9c9fdc749"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        48,
        144
      ],
      "id": "ed14f1bb-17eb-4e0e-ae2f-fd2159dd635b",
      "name": "obtener_empresas",
      "credentials": {
        "notionApi": {
          "id": "fyQ0RqcmHkhWZLsD",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del nodo anterior\nconst items = $input.all();\n\n// Extraer lista simple de nombres\nconst nombres = items.map(item => item.json.name);\n\n// Extraer objetos con id + nombre\nconst empresas = items.map(item => ({\n  id: item.json.id,\n  nombre: item.json.name\n}));\n\n// Devolver ambos formatos\nreturn [\n  {\n    json: {\n      \"empresas/proyectos\": empresas,\n      \"lista_nombres\": nombres\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        144
      ],
      "id": "254c7b9d-f1b4-49a3-a602-910e2d5d9321",
      "name": "limpiar_empresas"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "chat_id"
            },
            {
              "name": "input"
            },
            {
              "name": "wa_id"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -496,
        144
      ],
      "id": "eb7aad32-feee-49bc-a2c5-a6fee0df71f9",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('When Executed by Another Workflow').first().json.chat_id }}",
        "value": "={\n  \"Estado\": \"empresa_obtenida\",\n  \"Entradas\": [\n    {\n      \"Entrada_inicial\": \"{{ $('When Executed by Another Workflow').first().json.input }}\",\n      \"Entrada_registro\": \"{{ $('redis_a_JSON').first().json.Entradas[0].Entrada_registro }}\",\n      \"Entrada_empresa\": \"{{ $('redis_a_JSON').first().json.Entradas[0].Entrada_empresa }}\"\n    }\n  ],\n  \"Empresa\": [\n    {\n      \"id\": \"{{ $json.empresa_id }}\",\n      \"Nombre\": \"{{ $json.empresa_normalizada }}\",\n      \"Confianza_empresa\": {{ $json.confianza }}\n    }\n  ],\n  \"Registro\": [\n    {\n      \"Nombre\": \"{{ $('redis_a_JSON').first().json.Registro[0].Nombre }}\",\n      \"Confianza_registro\": {{ $('redis_a_JSON').first().json.Registro[0].Confianza_registro }}\n    }\n  ],\n  \"Agente\": [\n    {\n      \"Titulo\": \"{{ $('redis_a_JSON').first().json.Agente[0].Titulo }}\",\n      \"Descripción\": \"{{ $('redis_a_JSON').first().json.Agente[0].Descripción }}\",\n      \"Fecha\": \"{{ $('redis_a_JSON').first().json.Agente[0].Fecha }}\",\n      \"Fecha_inicio\": \"{{ $('redis_a_JSON').first().json.Agente[0].Fecha_inicio }}\",\n      \"Fecha_fin\": \"{{ $('redis_a_JSON').first().json.Agente[0].Fecha_fin }}\",\n      \"Departamento\":\"{{ $('redis_a_JSON').first().json.Agente[0].Departamento || \"\"}}\",\n      \"Prioridad\":\"{{ $('redis_a_JSON').first().json.Agente[0].Prioridad || \"\"}}\"\n    }\n  ]\n}\n",
        "expire": true,
        "ttl": 600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1216,
        80
      ],
      "id": "2c1a01df-68e8-42b9-9ea3-4f7bea668272",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "FCP6hT01xV80XIPs",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "data",
        "key": "={{ $json.chat_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -320,
        144
      ],
      "id": "c576ae3f-7319-413b-b65a-8f558ffe012e",
      "name": "obtener_redis",
      "credentials": {
        "redis": {
          "id": "FCP6hT01xV80XIPs",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rawData = $json[\"data\"];\nlet parsedData;\n\ntry {\n  // Si la data viene null o vacía, devolvemos estructura vacía por defecto\n  if (!rawData) {\n    parsedData = {\n      Estado: \"Consultando empresa\",\n      Entradas: [\n        {\n          Entrada_inicial: \"\",\n          Entrada_registro: \"\",\n          Entrada_empresa: \"\"\n        }\n      ],\n      Empresa: [\n        {\n          Nombre: \"\",\n          Confianza_empresa: 0\n        }\n      ],\n      Registro: [\n        {\n          Nombre: \"\",\n          Confianza_registro: 0\n        }\n      ],\n      \"Agente\": [\n        {\n          \"Titulo\": \"\",\n          \"Descripción\": \"\",\n          \"Fecha\": \"\",\n          \"Departamento\": \"\",\n          \"Prioridad\": \"\"\n        }\n      ]\n\n    };\n  } else {\n    // Si viene data, intentamos parsear\n    let text = rawData;\n\n    // Limpieza si tiene saltos de línea o formato pseudo-JSON\n    if (typeof text === \"string\" && text.includes('{') && !text.includes('\\\\\"')) {\n      text = text.replace(/\\n/g, '').replace(/\\r/g, '').trim();\n    }\n\n    // Primer parseo\n    let firstParse = typeof text === \"string\" ? JSON.parse(text) : text;\n\n    // Segundo parseo si es doblemente serializado\n    if (typeof firstParse === \"string\") {\n      parsedData = JSON.parse(firstParse);\n    } else {\n      parsedData = firstParse;\n    }\n  }\n\n} catch (error) {\n  // Si algo falla, devolvemos estructura vacía para no romper el flujo\n  parsedData = {\n    Estado: \"Consultando empresa\",\n    Entradas: [\n      {\n        Entrada_inicial: \"\",\n        Entrada_registro: \"\",\n        Entrada_empresa: \"\"\n      }\n      ],\n    Empresa: [\n      {\n        Nombre: \"\",\n        Confianza_empresa: 0\n      }\n    ],\n    Registro: [\n      {\n        Nombre: \"\",\n        Confianza_registro: 0\n      }\n    ],\n    _error: {\n      mensaje: \"No se pudo parsear el JSON desde obtener_redis\",\n      detalle: error.message\n    }\n  };\n}\n\nreturn [{ json: parsedData }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -144,
        144
      ],
      "id": "5ccb9c20-82b0-4d8c-897c-9c8d5548aac3",
      "name": "redis_a_JSON"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9f49d5ab-164b-4c59-b6d3-51282c500ea9",
              "leftValue": "={{ $json.confianza }}",
              "rightValue": 0.7,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        912,
        144
      ],
      "id": "f9c19864-85d2-430d-aa79-ae387ee4ea31",
      "name": "confianza_formato?"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "810851532108753",
        "recipientPhoneNumber": "={{ $('When Executed by Another Workflow').first().json.wa_id }}",
        "textBody": "=Podrías facilitarme a qué empresa pertenece esto?",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        1392,
        272
      ],
      "id": "073a2d44-e675-425d-806f-7164231400b7",
      "name": "Send message",
      "webhookId": "cfe8ca01-d40b-457d-ae0e-2cdbd406d588",
      "credentials": {
        "whatsAppApi": {
          "id": "pV4vxi8821Z8UsSL",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('When Executed by Another Workflow').first().json.chat_id }}",
        "value": "={\n  \"Estado\": \"falta_empresa\",\n  \"Entradas\": [\n    {\n      \"Entrada_inicial\": \"{{ $('When Executed by Another Workflow').first().json.input }}\",\n      \"Entrada_registro\": \"{{ $('redis_a_JSON').first().json.Entradas[0].Entrada_registro }}\",\n      \"Entrada_empresa\": \"{{ $('redis_a_JSON').first().json.Entradas[0].Entrada_empresa }}\"\n    }\n  ],\n  \"Empresa\": [\n    {\n      \"id\": \"{{ $json.empresa_id }}\",\n      \"Nombre\": \"{{ $json.empresa_normalizada }}\",\n      \"Confianza_empresa\": {{ $json.confianza }}\n    }\n  ],\n  \"Registro\": [\n    {\n      \"Nombre\": \"{{ $('redis_a_JSON').first().json.Registro[0].Nombre }}\",\n      \"Confianza_registro\": {{ $('redis_a_JSON').first().json.Registro[0].Confianza_registro }}\n    }\n  ],\n  \"Agente\": [\n    {\n      \"Titulo\": \"{{ $('redis_a_JSON').first().json.Agente[0].Titulo }}\",\n      \"Descripción\": \"{{ $('redis_a_JSON').first().json.Agente[0].Descripción }}\",\n      \"Fecha\": \"{{ $('redis_a_JSON').first().json.Agente[0].Fecha }}\",\n      \"Fecha_inicio\": \"{{ $('redis_a_JSON').first().json.Agente[0].Fecha_inicio }}\",\n      \"Fecha_fin\": \"{{ $('redis_a_JSON').first().json.Agente[0].Fecha_fin }}\",\n      \"Departamento\":\"{{ $('redis_a_JSON').first().json.Agente[0].Departamento }}\",\n      \"Prioridad\":\"{{ $('redis_a_JSON').first().json.Agente[0].Prioridad }}\"\n    }\n  ]\n}\n",
        "expire": true,
        "ttl": 600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1216,
        272
      ],
      "id": "e7e17b21-2cee-4cae-8c88-6fc4b8fcdd90",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "FCP6hT01xV80XIPs",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"empresa\": \"nombre de la empresa\",\n  \"confianza\": 0.7\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        592,
        304
      ],
      "id": "b19c67ec-8d32-42a3-a593-ee57f42cfc77",
      "name": "Structured Output Parser"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "chat_id": "810851532108753",
          "input": "Necesito que me agende una reunión con lucas",
          "wa_id": "5493544641683"
        }
      }
    ]
  },
  "repo_name": "Sistema_de_gestion_central_notion_n8n",
  "repo_owner": "Tomybau",
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-13T22:22:01.454Z",
      "updatedAt": "2025-10-13T22:22:01.454Z",
      "role": "workflow:owner",
      "workflowId": "zSm2pgcHQUO60vua",
      "projectId": "5ieVStNAHt1Bb6Tr"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-10-15T23:16:12.194Z",
      "updatedAt": "2025-10-15T23:16:12.194Z",
      "id": "NHMeAPMIT8hmJz47",
      "name": "Notion"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-10-16T14:38:28.657Z",
  "versionId": "d321d2d1-eab0-4570-a7be-1053006af2e3"
}